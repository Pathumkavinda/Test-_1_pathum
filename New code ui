<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Management System</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #4f46e5;
            --danger-color: #ef4444;
            --success-color: #22c55e;
            --background-color: #f9fafb;
            --card-background: #ffffff;
            --text-color: #1f2937;
            --border-color: #e5e7eb;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            line-height: 1.5;
            padding: 2rem;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .header {
            margin-bottom: 2rem;
        }

        .header h1 {
            font-size: 2rem;
            font-weight: 700;
            color: var(--text-color);
            margin-bottom: 0.5rem;
        }

        .card {
            background: var(--card-background);
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
            margin-bottom: 2rem;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .input-group {
            display: flex;
            flex-direction: column;
        }

        .input-group label {
            font-size: 0.875rem;
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        input {
            padding: 0.75rem;
            border: 1px solid var(--border-color);
            border-radius: 0.375rem;
            font-size: 0.875rem;
            transition: border-color 0.15s ease;
        }

        input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 0.375rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.15s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-primary:hover {
            background-color: #4338ca;
        }

        .btn-danger {
            background-color: var(--danger-color);
            color: white;
        }

        .btn-danger:hover {
            background-color: #dc2626;
        }

        .btn-edit {
            background-color: #f3f4f6;
            color: var(--text-color);
        }

        .btn-edit:hover {
            background-color: #e5e7eb;
        }

        table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }

        th {
            text-align: left;
            padding: 1rem;
            font-weight: 600;
            border-bottom: 2px solid var(--border-color);
        }

        td {
            padding: 1rem;
            border-bottom: 1px solid var(--border-color);
        }

        .actions {
            display: flex;
            gap: 0.5rem;
        }

        .empty-state {
            text-align: center;
            padding: 2rem;
            color: #6b7280;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background-color: white;
            padding: 2rem;
            border-radius: 0.5rem;
            width: 100%;
            max-width: 500px;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .close {
            cursor: pointer;
            font-size: 1.5rem;
        }

        .toast {
            position: fixed;
            bottom: 1rem;
            right: 1rem;
            padding: 1rem;
            border-radius: 0.375rem;
            background-color: white;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            display: none;
        }

        .toast.success {
            background-color: var(--success-color);
            color: white;
        }

        .toast.error {
            background-color: var(--danger-color);
            color: white;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Student Management System</h1>
        </div>

        <div class="card">
            <form id="studentForm" onsubmit="createStudent(event)">
                <div class="form-grid">
                    <div class="input-group">
                        <label for="studentId">Student ID</label>
                        <input type="text" id="studentId" required placeholder="Enter student ID">
                    </div>
                    <div class="input-group">
                        <label for="studentName">Student Name</label>
                        <input type="text" id="studentName" required placeholder="Enter student name">
                    </div>
                    <div class="input-group" style="justify-content: flex-end;">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-plus"></i>
                            Add Student
                        </button>
                    </div>
                </div>
            </form>
        </div>

        <div class="card">
            <table id="studentsTable">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Student rows will go here -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Edit Modal -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Edit Student</h2>
                <span class="close">&times;</span>
            </div>
            <form id="editForm">
                <div class="input-group" style="margin-bottom: 1rem;">
                    <label for="editName">Student Name</label>
                    <input type="text" id="editName" required>
                </div>
                <button type="submit" class="btn btn-primary">Update Student</button>
            </form>
        </div>
    </div>

    <!-- Toast Notification -->
    <div id="toast" class="toast"></div>

    <script>
        const apiUrl = 'http://localhost:8080/rest_service/api/students';
        const modal = document.getElementById('editModal');
        const toast = document.getElementById('toast');
        let currentEditId = null;

        // Show toast notification
        function showToast(message, type = 'success') {
            toast.textContent = message;
            toast.className = `toast ${type}`;
            toast.style.display = 'block';
            setTimeout(() => {
                toast.style.display = 'none';
            }, 3000);
        }

        // Fetch and display all students
        async function getStudents() {
            try {
                const response = await fetch(apiUrl);
                const students = await response.json();
                const tableBody = document.querySelector('#studentsTable tbody');
                tableBody.innerHTML = '';

                if (students.length === 0) {
                    tableBody.innerHTML = `
                        <tr>
                            <td colspan="3" class="empty-state">
                                <i class="fas fa-users" style="font-size: 2rem; margin-bottom: 1rem;"></i>
                                <p>No students found. Add a new student to get started.</p>
                            </td>
                        </tr>
                    `;
                    return;
                }

                students.forEach(student => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${student.id}</td>
                        <td>${student.name}</td>
                        <td class="actions">
                            <button class="btn btn-edit" onclick="openEditModal(${student.id}, '${student.name}')">
                                <i class="fas fa-edit"></i>
                                Edit
                            </button>
                            <button class="btn btn-danger" onclick="deleteStudent(${student.id})">
                                <i class="fas fa-trash"></i>
                                Delete
                            </button>
                        </td>
                    `;
                    tableBody.appendChild(row);
                });
            } catch (error) {
                showToast('Failed to fetch students', 'error');
            }
        }

        // Create a new student
        async function createStudent(event) {
            event.preventDefault();
            const id = document.getElementById('studentId').value;
            const name = document.getElementById('studentName').value;

            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ id, name })
                });

                if (response.ok) {
                    showToast('Student created successfully');
                    document.getElementById('studentForm').reset();
                    getStudents();
                } else {
                    throw new Error('Failed to create student');
                }
            } catch (error) {
                showToast('Failed to create student', 'error');
            }
        }

        // Open edit modal
        function openEditModal(id, name) {
            currentEditId = id;
            document.getElementById('editName').value = name;
            modal.style.display = 'flex';
        }

        // Close modal
        document.querySelector('.close').onclick = () => {
            modal.style.display = 'none';
        }

        // Update student
        document.getElementById('editForm').onsubmit = async (event) => {
            event.preventDefault();
            const newName = document.getElementById('editName').value;

            try {
                const response = await fetch(apiUrl, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ id: currentEditId, name: newName })
                });

                if (response.ok) {
                    modal.style.display = 'none';
                    showToast('Student updated successfully');
                    getStudents();
                } else {
                    throw new Error('Failed to update student');
                }
            } catch (error) {
                showToast('Failed to update student', 'error');
            }
        }

        // Delete student
        async function deleteStudent(id) {
            if (confirm('Are you sure you want to delete this student?')) {
                try {
                    const response = await fetch(`${apiUrl}/${id}`, {
                        method: 'DELETE'
                    });

                    if (response.ok) {
                        showToast('Student deleted successfully');
                        getStudents();
                    } else {
                        throw new Error('Failed to delete student');
                    }
                } catch (error) {
                    showToast('Failed to delete student', 'error');
                }
            }
        }

        // Close modal when clicking outside
        window.onclick = (event) => {
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        }

        // Initial load
        getStudents();
    </script>
</body>
</html>
